{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["options","selectOnLineNumbers","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSchemaChange","nextSchema","schema","getSchema","data","getData","setState","validationErrors","getValidationErrors","saveState","setupEditorValidation","handleDataChange","nextData","dataEditorDidMount","editor","monaco","dataMonaco","restoredState","restoreState","state","packedSchema","window","btoa","jsonpack","pack","packedData","history","replaceState","undefined","concat","hash","location","length","version","slice","encoded","split","encodedSchema","encodedData","unpack","atob","JSON","stringify","string","object","parse","e","schemaStr","arguments","getJSONStringAsObject","dataStr","languages","json","jsonDefaults","setDiagnosticsOptions","validate","schemas","uri","fileMatch","$ajv","ajv","compile","schemaPath","message","errors","map","_ref","react_default","a","createElement","className","lib_default","width","height","language","value","onChange","editorDidMount","error","index","key","React","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6125300.chunk.js","sourcesContent":["import React from \"react\";\nimport MonacoEditor from \"react-monaco-editor\";\nimport ajv from \"ajv\";\nimport jsonpack from \"jsonpack\";\n\nimport \"./App.css\";\n\nconst options = {\n  selectOnLineNumbers: true\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const restoredState = this.restoreState();\n\n    this.state = restoredState\n      ? restoredState\n      : {\n          schema: \"\",\n          data: \"\"\n        };\n\n    this.state.validationErrors = this.getValidationErrors(\n      this.getSchema(this.state.schema),\n      this.getData(this.state.data)\n    );\n  }\n\n  saveState(schema, data) {\n    if (!schema || !data) {\n      return;\n    }\n\n    const packedSchema = window.btoa(jsonpack.pack(schema));\n    const packedData = window.btoa(jsonpack.pack(data));\n\n    if (packedSchema && packedData) {\n      window.history.replaceState(\n        undefined,\n        undefined,\n        `#0${packedSchema}|${packedData}`\n      );\n    }\n  }\n\n  restoreState() {\n    const { hash } = window.location;\n\n    if (hash[0] !== \"#\" || hash.length < 2) return null;\n\n    const version = hash.slice(1, 2);\n    const encoded = hash.slice(2).split(\"|\");\n\n    const encodedSchema = encoded[0];\n    const encodedData = encoded[1];\n\n    if (version === \"0\") {\n      const schema = jsonpack.unpack(window.atob(encodedSchema));\n      const data = jsonpack.unpack(window.atob(encodedData));\n\n      return {\n        schema: JSON.stringify(schema, null, 2),\n        data: JSON.stringify(data, null, 2)\n      };\n    }\n\n    return null;\n  }\n\n  getJSONStringAsObject(string) {\n    let object;\n\n    try {\n      object = JSON.parse(string);\n    } catch (e) {\n      return null;\n    }\n\n    return object;\n  }\n\n  getSchema(schemaStr = this.state.schema) {\n    return this.getJSONStringAsObject(schemaStr);\n  }\n\n  getData(dataStr = this.state.data) {\n    return this.getJSONStringAsObject(dataStr);\n  }\n\n  setupEditorValidation(schemaStr = this.state.schema) {\n    const schema = this.getSchema(schemaStr);\n\n    if (schema) {\n      this.dataMonaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        validate: true,\n        schemas: [\n          {\n            uri: \"http://myserver/foo-schema.json\",\n            fileMatch: [\"inmemory://model/2\"],\n            schema: schema\n          }\n        ]\n      });\n    }\n  }\n\n  handleSchemaChange = nextSchema => {\n    const schema = this.getSchema(nextSchema);\n    const data = this.getData();\n\n    this.setState({\n      schema: nextSchema,\n      validationErrors: this.getValidationErrors(schema, data)\n    });\n\n    this.saveState(schema, data);\n\n    this.setupEditorValidation(nextSchema);\n  };\n\n  getValidationErrors(schema, data) {\n    if (schema && data) {\n      const $ajv = new ajv();\n\n      let validate;\n\n      try {\n        validate = $ajv.compile(schema);\n      } catch (e) {\n        return [\n          {\n            schemaPath: \"?\",\n            message: e.message\n          }\n        ];\n      }\n\n      const valid = validate(data);\n\n      if (!valid) {\n        return validate.errors.map(({ schemaPath, message }) => ({\n          schemaPath,\n          message\n        }));\n      }\n    }\n\n    return [];\n  }\n\n  handleDataChange = nextData => {\n    const schema = this.getSchema();\n    const data = this.getData(nextData);\n\n    this.setState({\n      data: nextData,\n      validationErrors: this.getValidationErrors(schema, data)\n    });\n\n    this.saveState(schema, data);\n  };\n\n  dataEditorDidMount = (editor, monaco) => {\n    this.dataMonaco = monaco;\n\n    this.setupEditorValidation();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-column\">\n          <MonacoEditor\n            width=\"100%\"\n            height=\"600\"\n            language=\"json\"\n            value={this.state.schema}\n            options={options}\n            onChange={this.handleSchemaChange}\n          />\n        </div>\n        <div className=\"App-column\">\n          <MonacoEditor\n            width=\"100%\"\n            height=\"200\"\n            language=\"json\"\n            value={this.state.data}\n            options={options}\n            onChange={this.handleDataChange}\n            editorDidMount={this.dataEditorDidMount}\n          />\n          <div className=\"App-validation\">\n            {this.state.validationErrors.length ? (\n              this.state.validationErrors.map((error, index) => (\n                <div className=\"App-error\" key={index}>\n                  <h3>{error.schemaPath}</h3>\n                  <p>{error.message}</p>\n                </div>\n              ))\n            ) : (\n              <div className=\"App-success\">no errors</div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}